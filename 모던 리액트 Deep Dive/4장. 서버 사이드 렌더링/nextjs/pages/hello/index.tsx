const Hello = () => {
  // 서버에서는 서버로, 클라이언트에서는 클라이언트로 출력된다. 즉, 두 군데 모두에서 실행되는 것이다.
  console.log(typeof window === "undefined" ? "서버" : "클라이언트");

  return <div>hello</div>;
};

// 이 메서드를 사용하면 서버 사이드 렌더링을 사용하는 페이지로 구분된다.
// - 사용하지 않는다면 빌드한 뒤 실행하면 "서버"가 출력되지 않는다.
// - 모든 작업이 서버에서 일어나는 것이 아니라는 것을 다시 한 번 확인할 수 있다.
export const getServerSideProps = () => {
  return {
    props: {},
  };
};

export default Hello;

// a 태그
// - 서버 렌더링 + 클라이언트 렌더링이 둘 다 발생한다.

// Link
// - 클라이언트 렌더링만 발생한다.
// - SPA처럼 페이지 전환이 발생한다.

// 결론적으로 next.js는 서버 사이드 렌더링과 클라이언트 사이드 라우팅의 장점을 합한 방식으로 작동한다.
// - <a> 대신 <Link>를 사용해야 한다.
// - 같은 맥락에서 window.location.push대신 router.push를 사용해야 한다.
// - 전체 페이지를 새로고침하는 방법대신 부분 렌더링하는 방법을 이용한다.

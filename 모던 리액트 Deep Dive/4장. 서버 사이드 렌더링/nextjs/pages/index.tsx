import React from "react";
import Head from "next/head";
import Link from "next/link";
// 컴포넌트 레벨 CSS
// - [name].module.css에 class를 작성하고 className 속성으로 사용할 수 있다.
import styles from "./index.module.css";

export default function Home() {
  const throwError = () => {
    throw new Error("Client error.");
  };

  const fetchServerError = () => {
    (async () => {
      await fetch("/api/server-error");
    })();
  };

  const LinkComponent = (path) => {
    return (
      <>
        <h1>{path}</h1>
        <ul>
          <li>
            <Link prefetch={false} href={`/${path}/1`}>
              /{path}/1로 이동
            </Link>
          </li>
        </ul>
      </>
    );
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <section>
          <h1 className={styles.red}>Error</h1>
          <Link href="/no-exist">
            <button>link</button>
          </Link>
          <button onClick={throwError}>throw</button>
          <button onClick={fetchServerError}>server-error</button>
        </section>
        <section>
          <h1>Link</h1>
          <ul>
            <li>
              {/* eslint-disable-next-line */}
              <a href="/hello">a 태그로 /hello로 이동</a>
            </li>
            <li>
              <Link prefetch={false} href="/hello">
                Link 컴포넌트로 /hello로 이동
              </Link>
            </li>
          </ul>
          {LinkComponent("ssr")}
          {LinkComponent("ssg")}
          {LinkComponent("getInitialProps")}
        </section>
      </main>
      <footer />
    </div>
  );
}

// 라우팅 구조는 /pages 디렉토리를 기초로 구성된다.
// - 1. 각 페이지에 있는 default export로 내보낸 컴포넌트가 해당 페이지의 루트 컴포넌트가 된다.
// - 2. index.tsx는 루트 주소(/)에 해당한다.
// - 3. 디렉토리를 통해 깊이를 설정할 수 있다. 단, hello/index.tsx와 hello.tsx는 같은 라우트를 가리키는 것에 주의하자.
// - 4. 파일 이름의 []는 어떠한 문자도 올 수 있다는 뜻이다. 이 파일과 함께 같은 디렉토리에 고정된 이름의 다른 페이지가 있다면 다른 페이지가 우선한다.
// - 5. 싱글 캐치 올과 멀티 캐치 올을 한 디렉토리에서 동시에 사용할 수 없다. 멀티 캐치 올이 좀 더 범용적이며 유연하다.

// /hello/[some].tsx: 싱글 캐치 올
// - /hello/123 (O)
// - /hello/123/aaa (X)
// - /hello (X)

// /world/[...props].tsx: 멀티 캐치 올
// - /world/123 (O)
// - /world/123/aaa (O)
// - /world (X)
